#include <iostream>
#include <string>
#include <fstream>
#include <cmath>

int mandelbrot(const float& x, const float& y, const int& max_iteration,
               const float& scale_x = 1.6f, const float& scale_y = 1.6f,
               const float& offset_x = 0.f, const float& offset_y = 0.f,
               const float& radius = 2.f) {
    float r2 = radius * radius;

    float z_real = 0;
    float z_real_tmp = 0;

    float z_imaginary = 0;

    float c_real = x * scale_x + offset_x;
    float c_imaginary = y * scale_y + offset_y;

    int iterations = 0;

    for (int i = 0; i < max_iteration; i++) {
        z_real_tmp = z_real * z_real - z_imaginary * z_imaginary + c_real;
        z_imaginary = 2.f * z_real * z_imaginary + c_imaginary;
        z_real = z_real_tmp;

        // dot product instead of sqrt
        if (z_real * z_real + z_imaginary * z_imaginary > r2)
            break;

        iterations++;
    }

    return iterations;
}

float map(float x, float in_min, float in_max, float out_min, float out_max) {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int main(int argc, char const* argv[]) {
    const int width = 512, height = 512;

    std::ofstream img("mandelbrot.ppm");
    img << "P3" << std::endl
        << width << " " << height << std::endl
        << "255" << std::endl;
    img << "# Mandelbrot Set" << std::endl;
    img << "# Generated by KTheXIII" << std::endl;
    img << "# https://github.com/KTheXIII" << std::endl;

    for (int i = 1; i < height + 1; i++) {
        float map_y = map((float)i, 1.0, (float)height, 1.0, -1.0);

        for (int j = 1; j < width + 1; j++) {
            float map_x = map((float)j, 1.0, (float)width, -1.0, 1.0);
            int n = mandelbrot(map_x, map_y, 256);

            if (n == 256) {
                img << 0 << " " << 0 << " " << 0 << std::endl;
                continue;
            }

            img << 255 << " " << 255 << " " << 255 << std::endl;
        }
    }

    return 0;
}
